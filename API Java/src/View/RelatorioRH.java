/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import DAO.ConexaoDAO;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author apqui
 */
public class RelatorioRH extends javax.swing.JFrame {

    Connection conn;
    PreparedStatement pstm;
    ResultSet rs;

    /**
     * Creates new form RelatorioRH
     */
    public RelatorioRH() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        Candidatos = new javax.swing.JButton();
        btnVagas = new javax.swing.JButton();
        RH = new javax.swing.JButton();
        Aprovados = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Candidatos.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        Candidatos.setForeground(new java.awt.Color(255, 255, 255));
        Candidatos.setText("Candidatos");
        Candidatos.setBorder(null);
        Candidatos.setBorderPainted(false);
        Candidatos.setContentAreaFilled(false);
        Candidatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CandidatosActionPerformed(evt);
            }
        });
        getContentPane().add(Candidatos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 260, 40));

        btnVagas.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnVagas.setForeground(new java.awt.Color(255, 255, 255));
        btnVagas.setText("Vagas");
        btnVagas.setBorderPainted(false);
        btnVagas.setContentAreaFilled(false);
        btnVagas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVagasActionPerformed(evt);
            }
        });
        getContentPane().add(btnVagas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 240, 50));

        RH.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        RH.setForeground(new java.awt.Color(255, 255, 255));
        RH.setText("RH");
        RH.setBorderPainted(false);
        RH.setContentAreaFilled(false);
        RH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RHActionPerformed(evt);
            }
        });
        getContentPane().add(RH, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 370, 200, 40));

        Aprovados.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        Aprovados.setForeground(new java.awt.Color(255, 255, 255));
        Aprovados.setText("Aprovados");
        Aprovados.setBorderPainted(false);
        Aprovados.setContentAreaFilled(false);
        Aprovados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AprovadosActionPerformed(evt);
            }
        });
        getContentPane().add(Aprovados, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, -1, 40));

        jButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Sair");
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 480, 130, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/tela_relat_princ.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 730, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CandidatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CandidatosActionPerformed
        Create_Candidato_Csv();    }//GEN-LAST:event_CandidatosActionPerformed

    private void btnVagasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVagasActionPerformed
        // TODO add your handling code here:
        Create_Vaga_Csv();
    }//GEN-LAST:event_btnVagasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void AprovadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AprovadosActionPerformed
        // TODO add your handling code here:
        Create_Aprovados_Csv();
    }//GEN-LAST:event_AprovadosActionPerformed

    private void RHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RHActionPerformed
        // TODO add your handling code here:
        Create_rh_Csv();
    }//GEN-LAST:event_RHActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RelatorioRH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RelatorioRH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RelatorioRH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RelatorioRH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RelatorioRH().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Aprovados;
    private javax.swing.JButton Candidatos;
    private javax.swing.JButton RH;
    private javax.swing.JButton btnVagas;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    private void Create_Candidato_Csv() {
        try {
            PrintWriter pw = new PrintWriter(new File("Candidato.csv"));

            StringBuilder sb = new StringBuilder();

            ConexaoDAO conexao = new ConexaoDAO();
            conn = conexao.conectaBD();

            String sql = "select * from candidato";

            pstm = conn.prepareStatement(sql);

            rs = pstm.executeQuery();

            String temp, temp2;
             sb.append("CPF;Nome Completo;Data de Nascimento;Email;Telefone;Endereco;Pretensao Salarial\n");
            while (rs.next()) {

                sb.append(rs.getString("cpf"));
                sb.append(";");
                sb.append(rs.getString("nome_completo"));
                sb.append(";");
                sb.append(rs.getString("data_nascimento"));
                sb.append(";");
                sb.append(rs.getString("email"));
                sb.append(";");
                temp = Integer.toString(rs.getInt("telefone"));
                sb.append(temp);
                sb.append(";");
                sb.append(rs.getString("endereco"));
                sb.append(";");
                temp2 = Double.toString(rs.getInt("pretencao_salarial"));
                sb.append(String.valueOf(rs.getDouble("pretencao_salarial")));
                sb.append(";");
                sb.append(rs.getString("senha"));
                sb.append("\n");

            }
            pw.write(sb.toString());
            pw.close();

        } catch (Exception e) {

        }
    }
        private void Create_Vaga_Csv() {
        try {
            PrintWriter pw = new PrintWriter(new File("Vaga.csv"));

            StringBuilder sb = new StringBuilder();

            ConexaoDAO conexao = new ConexaoDAO();
            conn = conexao.conectaBD();

            String sql = "select * from vaga";

            pstm = conn.prepareStatement(sql);

            rs = pstm.executeQuery();

            String temp,temp2, temp3;
             sb.append("ID DA VAGA;NOME DA VAGA; DESCRICAO DA VAGA; PRETENCAO SALARIAL; CARGO; EXPERIENCIA PROFISSIONAL NECESSARIA; STATUS; QTD. DE CANDIDATOS\n");
            while (rs.next()) {
                temp = Integer.toString(rs.getInt("id_vaga"));
                sb.append(rs.getString("nome_vaga"));
                sb.append(";");
                sb.append(rs.getString("descricao_vaga"));
                sb.append(";");
                temp2 = Double.toString(rs.getInt("pretencao_salarial"));
                sb.append(";");
                sb.append(rs.getString("cargo"));
                sb.append(";");
                sb.append(rs.getString("experiencia_profissional_necessaria"));
                sb.append(";");
                sb.append(rs.getString("status"));
                temp = Integer.toString(rs.getInt("quantidade_candidatos"));
                sb.append("\n");

            }
            pw.write(sb.toString());
            pw.close();

        } catch (Exception e) {

        }
        

    }
        private void Create_Aprovados_Csv() {
        try {
            PrintWriter pw = new PrintWriter(new File("Relacao_Candidato_Vaga.csv"));

            StringBuilder sb = new StringBuilder();

            ConexaoDAO conexao = new ConexaoDAO();
            conn = conexao.conectaBD();

            String sql = "select * from candidato_vaga";

            pstm = conn.prepareStatement(sql);

            rs = pstm.executeQuery();

            String temp2;
             sb.append("CPF CANDIDATO;ID DA VAGA;STATUS DA VAGA; PROCESSO DA VAGA; MOTIVO\n");
            while (rs.next()) {
                sb.append(rs.getString("fk_cpf"));
                temp2 = Integer.toString(rs.getInt("fk_id_vaga"));
                sb.append(rs.getString("status_vaga"));
                sb.append(";");
                sb.append(rs.getString("processo_vaga"));
                sb.append(";");
                sb.append(rs.getString("motivo"));
                sb.append("\n");

            }
            pw.write(sb.toString());
            pw.close();

        } catch (Exception e) {

        }

    }
         private void Create_rh_Csv() {
        try {
            PrintWriter pw = new PrintWriter(new File("RH_Funcionarios.csv"));

            StringBuilder sb = new StringBuilder();

            ConexaoDAO conexao = new ConexaoDAO();
            conn = conexao.conectaBD();

            String sql = "select * from rh";

            pstm = conn.prepareStatement(sql);

            rs = pstm.executeQuery();
            String temp2;
            sb.append("CPF;NOME COMPLETO; EMAIL; PERFIL;SENHA\n");
            while (rs.next()) {
                sb.append(rs.getString("cpf"));
                sb.append(";");
                sb.append(rs.getString("nome_completo"));
                sb.append(";");
                sb.append(rs.getString("email"));
                sb.append(";");
                sb.append(rs.getString("perfil"));
                sb.append(";");
                sb.append(rs.getString("senha"));
                sb.append("\n");

            }
            pw.write(sb.toString());
            pw.close();

        } catch (Exception e) {

        }
        

    }

}
